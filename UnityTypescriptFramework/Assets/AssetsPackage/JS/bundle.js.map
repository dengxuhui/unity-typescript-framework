{"version":3,"file":"bundle.js","sources":["../../../TsProj/src/Framework/Utils/Handler.ts","../../../TsProj/src/Example/ExHandler.ts","../../../TsProj/src/Framework/Utils/Timer.ts","../../../TsProj/src/Framework/UnityTs.ts","../../../TsProj/src/Main.ts"],"sourcesContent":["export default class Handler {\r\n    /*资源池*/\r\n    protected static _pool: Handler[] = [];\r\n    private static _guid: number = 1;\r\n\r\n    caller: object | null;\r\n    method: Function | null;\r\n    args: any[] | null;\r\n    once: boolean = false;\r\n    protected _id = 0;\r\n\r\n\r\n    /**\r\n     * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。\r\n     * @param    caller 执行域。\r\n     * @param    method 处理函数。\r\n     * @param    args 函数参数。\r\n     * @param    once 是否只执行一次。\r\n     */\r\n    constructor(caller: object | null = null, method: Function | null = null, args: any[] | null, once: boolean = false) {\r\n        this.set(caller, method, args, once);\r\n    }\r\n\r\n    /*\r\n    * @return 返回Handler实例\r\n    * */\r\n    private set(caller: any, method: Function | null, args: any[] | null, once = false): Handler {\r\n        this._id = Handler._guid++;\r\n        this.caller = caller;\r\n        this.method = method;\r\n        this.args = args;\r\n        this.once = once;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n    * 直接执行\r\n    * */\r\n    run(): any {\r\n        if (this.method == null) return null;\r\n        let id: number = this._id;\r\n        let result: any = this.method.apply(this.caller, this.args);\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n\r\n    /*\r\n    * 带参数的执行 自定义参数在后\r\n    * */\r\n    runWith(data: any): any {\r\n        if (this.method == null) return null;\r\n        let id: number = this._id;\r\n        let result: any;\r\n        if (data == null) {\r\n            result = this.method.apply(this.caller, this.args);\r\n        } else if (!this.args && !data.unshift) {\r\n            result = this.method.call(this.caller, data);\r\n        } else if (this.args) {\r\n            result = this.method.apply(this.caller, this.args.concat(data));\r\n        } else {\r\n            result = this.method.apply(this.caller, data)\r\n        }\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n\r\n    /*\r\n    * 清理对象\r\n    * */\r\n    clear(): Handler {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n    * 回收对象\r\n    * */\r\n    recover(): void {\r\n        if (this._id > 0) {\r\n            this._id = 0;\r\n            Handler._pool.push(this.clear());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。\r\n     * @param    caller 执行域(this)。\r\n     * @param    method 回调方法。\r\n     * @param    args 携带的参数。\r\n     * @param    once 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。\r\n     * @return  返回创建的handler实例。\r\n     */\r\n    static create(caller: any, method: Function | null, args: any[] | null = null, once: boolean = true): Handler {\r\n        if (Handler._pool.length)\r\n            return (Handler._pool.pop() as Handler).set(caller, method, args, once);\r\n        return new Handler(caller, method, args, once);\r\n    }\r\n}","import Handler from \"../Framework/Utils/Handler\";\r\n\r\nconst CS = require(\"csharp\");\r\n\r\n/*\r\n* Handler回调示例\r\n* */\r\nexport class ExHandler {\r\n    public static Run() {\r\n        let Debug = CS.UnityEngine.Debug;\r\n        let handler = Handler.create(null, (name) => {\r\n            Debug.LogFormat(\"get name is=>{0}\", name);\r\n        }, [\"Aer\"], true);\r\n        handler.run()\r\n    }\r\n}","/*\r\n* \r\n* 时钟管理器 使用Utf.timer访问\r\n* */\r\nimport UnityTs from \"../UnityTs\";\r\n\r\nexport default class Timer {\r\n    /*timer入口*/\r\n    static gSysTimer: Timer = null;\r\n\r\n    /*对象池*/\r\n    private static _pool: any[] = [];\r\n    private static _mid: number = 1;\r\n\r\n    scale: number = 1;\r\n    currTimer: number = Date.now();\r\n    currFrame: number = 0;\r\n    /*两帧之间的时间间隔，单位：毫秒*/\r\n    _delta: number = 0;\r\n    _lastTimer: number = Date.now();\r\n\r\n    private _map: any[] = [];\r\n    private _handlers: any[] = [];\r\n    private _temp: any[] = [];\r\n    private _count: number = 0;\r\n\r\n    constructor(autoActive: boolean = true) {\r\n        autoActive && Timer.gSysTimer && Timer.gSysTimer.frameLoop(1, this, this._update);\r\n    }\r\n\r\n    /* 获取两帧之间的时间间隔，单位毫秒*/\r\n    get delta(): number {\r\n        return this._delta;\r\n    }\r\n\r\n    /* 帧循环*/\r\n    _update(): void {\r\n        if (this.scale <= 0) {\r\n            this._lastTimer = Date.now();\r\n            this._delta = 0;\r\n            return;\r\n        }\r\n        let frame: number = this.currFrame = this.currFrame + this.scale;\r\n        let now: number = Date.now();\r\n        let awake: boolean = (now - this._lastTimer) > 30000;\r\n        this._delta = (now - this._lastTimer) * this.scale;\r\n        let timer: number = this.currTimer = this.currTimer + this._delta;\r\n        this._lastTimer = now;\r\n\r\n        let handlers: any[] = this._handlers;\r\n        this._count = 0;\r\n        for (let i: number = 0, n: number = handlers.length; i < n; i++) {\r\n            let handler: TimerHandler = handlers[i];\r\n            if (handler.method !== null) {\r\n                let t: number = handler.useFrame ? frame : timer;\r\n                if (t >= handler.exeTime) {\r\n                    if (handler.repeat) {\r\n                        if (!handler.jumpFrame || awake) {\r\n                            handler.exeTime += handler.delay;\r\n                            handler.run(false);\r\n                            if (t > handler.exeTime) {\r\n                                handler.exeTime += Math.ceil((t - handler.exeTime) / handler.delay) * handler.delay;\r\n                            }\r\n                        } else {\r\n                            // 一帧可多次执行的情况。\r\n                            while (t >= handler.exeTime) {\r\n                                handler.exeTime += handler.delay;\r\n                                handler.run(false)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        handler.run(true);\r\n                    }\r\n                }\r\n            } else {\r\n                this._count++;\r\n            }\r\n        }\r\n\r\n        if (this._count > 30 || frame % 200 === 0) this._clearHandlers();\r\n    }\r\n\r\n    /*整理handlers数组*/\r\n    _clearHandlers(): void {\r\n        let handlers: any[] = this._handlers;\r\n        for (let i: number = 0, n: number = handlers.length; i < n; i++) {\r\n            let handler: TimerHandler = handlers[i];\r\n            if (handler.method !== null) this._temp.push(handler);\r\n            else this._recoverHandler(handler);\r\n        }\r\n        this._handlers = this._temp;\r\n        handlers.length = 0;\r\n        this._temp = handlers;\r\n    }\r\n\r\n    /*回收handler*/\r\n    _recoverHandler(handler: TimerHandler): void {\r\n        if (this._map[handler.key] == handler) this._map[handler.key] = null;\r\n        handler.clear();\r\n        Timer._pool.push(handler);\r\n    }\r\n\r\n    /* 创建TimerHandler实例*/\r\n    _create(useFrame: boolean, repeat: boolean, delay: number, caller: any, method: Function, args: any[], coverBefore: boolean): TimerHandler {\r\n        if (!delay) {\r\n            method.apply(caller, args);\r\n            return null;\r\n        }\r\n        let handler: TimerHandler;\r\n        if (coverBefore) {\r\n            handler = this._getHandler(caller, method);\r\n            if (handler) {\r\n                handler.repeat = repeat;\r\n                handler.useFrame = useFrame;\r\n                handler.delay = delay;\r\n                handler.caller = caller;\r\n                handler.method = method;\r\n                handler.args = args;\r\n                handler.exeTime = delay + (useFrame ? this.currFrame : this.currTimer + Date.now() - this._lastTimer);\r\n                return handler;\r\n            }\r\n        }\r\n        handler = Timer._pool.length > 0 ? Timer._pool.pop() : new TimerHandler();\r\n        handler.repeat = repeat;\r\n        handler.useFrame = useFrame;\r\n        handler.delay = delay;\r\n        handler.caller = caller;\r\n        handler.method = method;\r\n        handler.args = args;\r\n        handler.exeTime = delay + (useFrame ? this.currFrame : this.currTimer + Date.now() - this._lastTimer);\r\n\r\n        this._indexHandler(handler);\r\n        this._handlers.push(handler);\r\n        return handler;\r\n    }\r\n\r\n    /*获取handler*/\r\n    _getHandler(caller: any, method: any): TimerHandler {\r\n        let cid: number = caller ? caller.$_GID || (caller.$_GID = UnityTs.Utils.getGID()) : 0;\r\n        let mid: number = method.$_TID || (method.$_TID = (Timer._mid++) * 100000);\r\n        return this._map[cid + mid];\r\n    }\r\n\r\n    /*\r\n    * 索引handler\r\n    * */\r\n    _indexHandler(handler: TimerHandler) {\r\n        let caller: any = handler.caller;\r\n        let method: any = handler.method;\r\n        let cid: number = caller ? caller.$_GID || (caller.$_GID = UnityTs.Utils.getGID()) : 0;\r\n        let mid: number = method.$_TID || (method.$_TID = (Timer._mid++) * 100000);\r\n        handler.key = cid + mid;\r\n        this._map[handler.key] = handler;\r\n    }\r\n\r\n\r\n    /**\r\n     * 定时执行一次。\r\n     * @param    delay    延迟时间(单位为毫秒)。\r\n     * @param    caller    执行域(this)。\r\n     * @param    method    定时器回调函数。\r\n     * @param    args    回调参数。\r\n     * @param    coverBefore    是否覆盖之前的延迟执行，默认为 true 。\r\n     */\r\n    once(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\r\n        this._create(false, false, delay, caller, method, args, coverBefore);\r\n    }\r\n\r\n    /**\r\n     * 定时重复执行。\r\n     * @param    delay    间隔时间(单位毫秒)。\r\n     * @param    caller    执行域(this)。\r\n     * @param    method    定时器回调函数。\r\n     * @param    args    回调参数。\r\n     * @param    coverBefore    是否覆盖之前的延迟执行，默认为 true 。\r\n     * @param    jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次\r\n     */\r\n    loop(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true, jumpFrame: boolean = false): void {\r\n        const handler: TimerHandler = this._create(false, true, delay, caller, method, args, coverBefore);\r\n        if (handler) handler.jumpFrame = jumpFrame;\r\n    }\r\n\r\n    /**\r\n     * 定时执行一次(基于帧率)。\r\n     * @param    delay    延迟几帧(单位为帧)。\r\n     * @param    caller    执行域(this)。\r\n     * @param    method    定时器回调函数。\r\n     * @param    args    回调参数。\r\n     * @param    coverBefore    是否覆盖之前的延迟执行，默认为 true 。\r\n     */\r\n    frameOnce(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\r\n        this._create(true, false, delay, caller, method, args, coverBefore);\r\n    }\r\n\r\n    /**\r\n     * 定时重复执行(基于帧率)。\r\n     * @param    delay    间隔几帧(单位为帧)。\r\n     * @param    caller    执行域(this)。\r\n     * @param    method    定时器回调函数。\r\n     * @param    args    回调参数。\r\n     * @param    coverBefore    是否覆盖之前的延迟执行，默认为 true 。\r\n     */\r\n    frameLoop(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\r\n        this._create(true, true, delay, caller, method, args, coverBefore);\r\n    }\r\n\r\n    /** 返回统计信息。*/\r\n    toString(): string {\r\n        return \" handlers:\" + this._handlers.length + \" pool:\" + Timer._pool.length;\r\n    }\r\n\r\n    /**\r\n     * 清理定时器。\r\n     * @param    caller 执行域(this)。\r\n     * @param    method 定时器回调函数。\r\n     */\r\n    clear(caller: any, method: Function): void {\r\n        let handler: TimerHandler = this._getHandler(caller, method);\r\n        if (handler) {\r\n            this._map[handler.key] = null;\r\n            handler.key = 0;\r\n            handler.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理对象身上的所有定时器。\r\n     * @param    caller 执行域(this)。\r\n     */\r\n    clearAll(caller: any): void {\r\n        if (!caller) return;\r\n        let i: number = 0;\r\n        const n: number = this._handlers.length;\r\n        for (; i < n; i++) {\r\n            const handler: TimerHandler = this._handlers[i];\r\n            if (handler.caller === caller) {\r\n                this._map[handler.key] = null;\r\n                handler.key = 0;\r\n                handler.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 立即提前执行定时器，执行之后从队列中删除\r\n     * @param    caller 执行域(this)。\r\n     * @param    method 定时器回调函数。\r\n     */\r\n    runTimer(caller: any, method: Function): void {\r\n        const handler: TimerHandler = this._getHandler(caller, method);\r\n        if (handler && handler.method != null) {\r\n            this._map[handler.key] = null;\r\n            handler.run(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 暂停时钟\r\n     */\r\n    pause(): void {\r\n        this.scale = 0;\r\n    }\r\n\r\n    /**\r\n     * 恢复时钟\r\n     */\r\n    resume(): void {\r\n        this.scale = 1;\r\n    }\r\n}\r\n\r\n/* 私有timer函数类*/\r\nclass TimerHandler {\r\n    key: number;\r\n    repeat: boolean;\r\n    delay: number;\r\n    useFrame: boolean;\r\n    exeTime: number;\r\n    caller: any;\r\n    method: Function;\r\n    args: any[];\r\n    jumpFrame: boolean;\r\n\r\n    clear(): void {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n    }\r\n\r\n    run(withClear: boolean): void {\r\n        let caller: any = this.caller;\r\n        if (caller && caller.destroyed) return this.clear();\r\n        let method: Function = this.method;\r\n        let args: any[] = this.args;\r\n        withClear && this.clear();\r\n        if (method == null) return;\r\n        args ? method.apply(caller, args) : method.call(caller);\r\n    }\r\n}","/* 全局类入口*/\r\nimport Timer from \"./Utils/Timer\";\r\n\r\nclass Utils {\r\n    /*id*/\r\n    static _gid: number = 1;\r\n    static _pi: number = 180 / Math.PI;\r\n    static _pi2: number = Math.PI / 180;\r\n    static _extReg: RegExp = /\\.(\\w+)\\??/g;\r\n\r\n    /*\r\n    * 角度转弧度\r\n    * */\r\n    public static toRadian(angle: number): number {\r\n        return angle * Utils._pi2;\r\n    }\r\n\r\n    /* \r\n    * 弧度转角度\r\n    * */\r\n    public static toAngle(radian: number): number {\r\n        return radian * Utils._pi;\r\n    }\r\n\r\n    /*\r\n    * 获取唯一id\r\n    * */\r\n    public static getGID(): number {\r\n        return Utils._gid++;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * <p>连接数组。和array的concat相比，此方法不创建新对象</p>\r\n     * <b>注意：</b>若 参数 a 不为空，则会改变参数 source 的值为连接后的数组。\r\n     * @param\tsource 待连接的数组目标对象。\r\n     * @param\tarray 待连接的数组对象。\r\n     * @return 连接后的数组。\r\n     */\r\n    public static concatArray(source: any[], array: any[]): any[] {\r\n        if (!array) return source;\r\n        if (!source) return array;\r\n        let i: number, len: number = array.length;\r\n        for (i = 0; i < len; i++) {\r\n            source.push(array[i]);\r\n        }\r\n        return source;\r\n    }\r\n}\r\n\r\nexport default class UnityTs {\r\n    /* 工具类*/\r\n    static Utils:typeof Utils = Utils;\r\n    static Timer:Timer;\r\n    static init(){\r\n        this.Timer = new Timer();\r\n        global.__tgjsRegisterTickHandler(this._timerUpdate);\r\n    }\r\n    \r\n    private static _timerUpdate(){\r\n        UnityTs.Timer._update();\r\n    }\r\n}\r\n","﻿import Handler from \"./Framework/Utils/Handler\";\r\nimport {ExHandler} from \"./Example/ExHandler\";\r\nimport UnityTs from \"./Framework/UnityTs\";\r\n\r\nconst CS = require(\"csharp\");\r\nlet Debug = CS.UnityEngine.Debug;\r\n\r\nclass Main {\r\n    constructor() {\r\n        UnityTs.init();\r\n        //\r\n        ExHandler.Run();\r\n        UnityTs.Timer.loop(2000, this, () => {\r\n            Debug.Log(\"timer call back\")\r\n        }, [1], true, false);\r\n    }\r\n}\r\n\r\nnew Main();"],"names":["CS"],"mappings":"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"}